/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : IEE1.h
**     Project     : MechGauge
**     Processor   : MC9S12ZVH128VLL
**     Component   : IntEEPROM
**     Version     : Component 02.218, Driver 01.28, CPU db: 3.00.000
**     Compiler    : CodeWarrior HCS12Z C Compiler
**     Date/Time   : 2020-05-26, 17:51, # CodeGen: 24
**     Abstract    :
**         This device "IntEEPROM" implements internal EEPROM
**     Comment     :
**         The EEPROM array is organized as rows of word (2 bytes), the EEPROM block's
**         erase sector size is 2 rows (2 words). Therefore it is preferable
**         to use word aligned data for writting - methods SetWord and SetLong -
**         with word aligned address.
**         Driver expects that all security options of EEPROM are disabled.
**         If some security option is enabled methods performing write
**         operation (such as SetWord) can return error.
**     Settings    :
**         Initialization:
**              Wait in methods        : Enabled
**
**     Contents    :
**         SetByte     - byte IEE1_SetByte(IEE1_TAddress Addr, byte Data);
**         GetByte     - byte IEE1_GetByte(IEE1_TAddress Addr, byte *Data);
**         SetWord     - byte IEE1_SetWord(IEE1_TAddress Addr, word Data);
**         GetWord     - byte IEE1_GetWord(IEE1_TAddress Addr, word *Data);
**         SetLong     - byte IEE1_SetLong(IEE1_TAddress Addr, dword Data);
**         GetLong     - byte IEE1_GetLong(IEE1_TAddress Addr, dword *Data);
**         Busy        - bool IEE1_Busy(void);
**         EraseEeprom - byte IEE1_EraseEeprom(IEE1_TAddress Addr);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file IEE1.h
** @version 01.28
** @brief
**         This device "IntEEPROM" implements internal EEPROM
*/         
/*!
**  @addtogroup IEE1_module IEE1 module documentation
**  @{
*/         

#ifndef __IEE1
#define __IEE1

/* MODULE IEE1. */

#include "Cpu.h"


#ifndef __BWUserType_IEE1_TAddress
#define __BWUserType_IEE1_TAddress
  /* User type for addressing of the EEPROM. Actual type depends on the CPU family. */
  typedef  word * IEE1_TAddress;       /* Type of address to the EEPROM */
#endif

#pragma CODE_SEG IEE1_CODE


/* EEPROM area start address (in the format used by component methods). */
#define IEE1_AREA_START                 ((IEE1_TAddress)0x00100000UL)
#define IEE1_AREA_START_INT             (0x00100000UL)
/* EEPROM area last address (in the format used by component methods). */
#define IEE1_AREA_END                   ((IEE1_TAddress)0x00100FFFUL)
#define IEE1_AREA_END_INT               (0x00100FFFUL)
/* EEPROM area size (in bytes). */
#define IEE1_AREA_SIZE                  0x1000U
/* EEPROM area sector size: minimal erasable unit (in bytes). */
#define IEE1_AREA_SECTOR_SIZE           0x04U
/* TRUE if the component setting allows clear bits of already programmed flash memory location without destruction of the value in surrounding addresses by sector erase. */
#define IEE1_ALLOW_CLEAR                (TRUE)
/* Size of programming phrase, i.e. number of bytes that must be programmed at once */
#define IEE1_PROGRAMMING_PHRASE         (0x02U)

#define EEPROMStart IEE1_AREA_START    /* [DEPRECATED] Start address of used EEPROM array */
#define EEPROMEnd IEE1_AREA_END        /* [DEPRECATED] End address of used EEPROM array */

/* Flags parameter of OnError event can contain following error values (values may be OR-ed together) */
/* Double bit fault detect */
#define IEE1_DOUBLE_FAULT               (0x02U)
/* Single bit fault detect */
#define IEE1_SINGLE_FAULT               (0x01U)

byte IEE1_SetByte(IEE1_TAddress Addr,byte Data);
/*
** ===================================================================
**     Method      :  IEE1_SetByte (component IntEEPROM)
**     Description :
**         This method writes a given byte to a specified address in
**         EEPROM. The method also sets address pointer for <SetActByte>
**         and <GetActByte> methods (applicable only if these methods
**         are enabled). The pointer is set to address passed as the
**         parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to EEPROM
**         Data            - Data to write
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_SPEED - the component does not work
**                           in the active speed mode 
**                           - ERR_BUSY - device is busy 
**                           - ERR_VALUE - verification of written data
**                           failed (read value does not match with
**                           written value) 
**                           - ERR_NOTAVAIL - other device-specific
**                           error 
**                           - ERR_RANGE - parameter Addr is out of range
** ===================================================================
*/

byte IEE1_GetByte(IEE1_TAddress Addr,byte *Data);
/*
** ===================================================================
**     Method      :  IEE1_GetByte (component IntEEPROM)
**     Description :
**         This method reads a byte from a specified EEPROM address.
**         The method also sets address pointer for <SetActByte> and
**         <GetActByte> methods (applicable only if these methods are
**         enabled). The pointer is set to address passed as the
**         parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - EEPROM Address
**       * Data            - A pointer to the returned 8-bit data
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_BUSY - device is busy 
**                           - ERR_RANGE - parameter Addr is out of range
** ===================================================================
*/

byte IEE1_SetWord(IEE1_TAddress Addr,word Data);
/*
** ===================================================================
**     Method      :  IEE1_SetWord (component IntEEPROM)
**     Description :
**         This method writes a given word (2 bytes) to the specified
**         address in EEPROM. The method also sets address pointer for
**         <SetActByte> and <GetActByte> methods (applicable only if
**         these methods are enabled). The pointer is set to address
**         passed as the parameter + 1.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to EEPROM
**         Data            - Data to write
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_SPEED - the component does not work
**                           in the active speed mode 
**                           - ERR_BUSY - device is busy 
**                           - ERR_VALUE - verification of written data
**                           failed (read value does not match with
**                           written value) 
**                           - ERR_NOTAVAIL - other device-specific
**                           error 
**                           - ERR_RANGE - selected address out of the
**                           selected address range
** ===================================================================
*/

byte IEE1_GetWord(IEE1_TAddress Addr,word *Data);
/*
** ===================================================================
**     Method      :  IEE1_GetWord (component IntEEPROM)
**     Description :
**         This method reads a word (2 bytes) from the specified EEPROM
**         address. The method also sets address pointer for
**         <SetActByte> and <GetActByte> methods (applicable only if
**         these methods are enabled). The pointer is set to address
**         passed as the parameter + 1.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to EEPROM
**       * Data            - Pointer to returned 16-bit data
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_BUSY - device is busy 
**                           - ERR_RANGE - selected address out of the
**                           selected address range
** ===================================================================
*/

byte IEE1_SetLong(IEE1_TAddress Addr,dword Data);
/*
** ===================================================================
**     Method      :  IEE1_SetLong (component IntEEPROM)
**     Description :
**         This method writes a given long word (4 bytes) to the
**         specified address in EEPROM. The method also sets address
**         pointer for <SetActByte> and <GetActByte> methods
**         (applicable only if these methods are enabled). The pointer
**         is set to address passed as the parameter + 3.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to EEPROM
**         Data            - Data to write
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_SPEED - the component does not work
**                           in the active speed mode 
**                           - ERR_BUSY - device is busy 
**                           - ERR_VALUE - verification of written data
**                           failed (read value does not match with
**                           written value) 
**                           - ERR_NOTAVAIL - other device-specific
**                           error 
**                           - ERR_RANGE - selected address out of the
**                           selected address range
** ===================================================================
*/

byte IEE1_GetLong(IEE1_TAddress Addr,dword *Data);
/*
** ===================================================================
**     Method      :  IEE1_GetLong (component IntEEPROM)
**     Description :
**         This method reads a long word (4 bytes) from the specified
**         EEPROM address. The method also sets address pointer for
**         <SetActByte> and <GetActByte> methods (applicable only if
**         these methods are enabled). The pointer is set to address
**         passed as the parameter + 3.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to EEPROM
**       * Data            - A pointer to the returned 32-bit data
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_BUSY - device is busy 
**                           - ERR_RANGE - selected address out of the
**                           selected address range
** ===================================================================
*/

#define IEE1_Busy() ((!FSTAT_CCIF) ? 1U:0U)
/*
** ===================================================================
**     Method      :  IEE1_Busy (component IntEEPROM)
**     Description :
**         Method returns the status of EEPROM device.
**     Parameters  : None
**     Returns     :
**         ---             -   - <true> if EEPROM is busy 
**                           - <false> if EEPROM is ready
** ===================================================================
*/

byte IEE1_EraseEeprom(IEE1_TAddress Addr);
/*
** ===================================================================
**     Method      :  IEE1_EraseEeprom (component IntEEPROM)
**     Description :
**         The method mass erases all EEPROM memory. The method also
**         sets address pointer for <SetActByte> and <GetActByte>
**         methods (applicable only if these methods are enabled). The
**         pointer is set to address passed as the parameter - 1.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Pass any valid EEPROM address. EEPROM
**                           module in some CPU families don't require
**                           address for mass erase, then the parameter
**                           is ignored.
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_SPEED - the component does not work
**                           in the active speed mode 
**                           - ERR_BUSY - device is busy 
**                           - ERR_NOTAVAIL - other device-specific error
** ===================================================================
*/

void IEE1_Init(void);
/*
** ===================================================================
**     Method      :  IEE1_Init (component IntEEPROM)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void IEE1_Interrupt(void);
#pragma CODE_SEG IEE1_CODE
/*
** ===================================================================
**     Method      :  IEE1_Interrupt (component IntEEPROM)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT

/* END IEE1. */

#endif /* ifndef __IEE1 */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS12Z series of microcontrollers.
**
** ###################################################################
*/
